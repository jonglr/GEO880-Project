strassennetz <- st_read("Data/Strassenetz.shp")
#import of the road network data
# Read the shapefile
strassennetz <- st_read("Data/Strassennetz.shp")
# Inspect the data
print(strassennetz)
View(strassennetz)
View(gpx_all)
# Specify the path to the folder containing GPX files
data_folder <- "Data"
# List all GPX files in the folder
gpx_files <- list.files(data_folder, pattern = "\\.gpx$", full.names = TRUE)
# Initialize an empty list to store the GPX data
gpx_list <- list()
# Loop through each GPX file and read the data
for (file in gpx_files) {
# Read the GPX file
gpx_sf <- st_read(file, layer = "tracks", quiet = TRUE)
# Transform the coordinate system to LV95 (EPSG:2056)
gpx_sf_transformed <- st_transform(gpx_sf, crs = 2056)
# Append to the list
gpx_list <- append(gpx_list, list(gpx_sf_transformed))
}
# Combine all the GPX data into a single sf object
gpx_all <- do.call(rbind, gpx_list)
# Modify the "type" attribute from "night hike" to "skitour"
gpx_all$type[10] <- "skitour"
# Inspect the combined data
print(gpx_all)
#import of the road network data
# Read the shapefile
strassennetz <- st_read("Data/Strassennetz.shp")
#import of the road network data
# Read the shapefile
streets <- st_read("Data/Strassennetz.shp")
# Inspect the data
print(streets)
#cut the street data extend to the buffer around GPX data
# Create a 100-meter buffer around the GPX tracks
gpx_buffer <- st_buffer(gpx_all, dist = 100)
# Find street segments that intersect or touch the GPX buffer
streets_intersecting <- st_intersection(streets, gpx_buffer)
# Plot the results
plot(st_geometry(streets), col = 'grey', main = "Streets and GPX Buffer")
View(streets_intersecting)
plot(st_geometry(gpx_buffer), add = TRUE, border = 'blue', lwd = 2)
# Plot the results
plot(st_geometry(gpx_buffer), add = TRUE, border = 'blue', lwd = 2)
# Plot the results
plot(st_geometry(gpx_buffer), add = TRUE, border = 'blue', lwd = 2)
check_pkg <- function(x) {
#' Checks whether a package is installed and installs or loads the package
if (!require(x, character.only = TRUE, quietly = TRUE))
{
install.packages(x, dep = TRUE)
if (!require(x, character.only = TRUE, quietly = TRUE))
stop("Package not found")
}
}
check_pkg("readr")
check_pkg("dplyr")
check_pkg("sf")
check_pkg("sp")
check_pkg("ggplot2")
check_pkg("lubridate")
check_pkg("SimilarityMeasures")
check_pkg("plotly")
check_pkg("geosphere")
check_pkg("leaflet")
Data <- here::here()   # Data folder
# Specify the path to the folder containing GPX files
data_folder <- "Data"
# List all GPX files in the folder
gpx_files <- list.files(data_folder, pattern = "\\.gpx$", full.names = TRUE)
# Initialize an empty list to store the GPX data
gpx_list <- list()
# Loop through each GPX file and read the data
for (file in gpx_files) {
# Read the GPX file
gpx_sf <- st_read(file, layer = "tracks", quiet = TRUE)
# Transform the coordinate system to LV95 (EPSG:2056)
gpx_sf_transformed <- st_transform(gpx_sf, crs = 2056)
# Append to the list
gpx_list <- append(gpx_list, list(gpx_sf_transformed))
}
# Combine all the GPX data into a single sf object
gpx_all <- do.call(rbind, gpx_list)
# Modify the "type" attribute from "night hike" to "skitour"
gpx_all$type[10] <- "skitour"
# Inspect the combined data
print(gpx_all)
#import of the road network data
# Read the shapefile
streets <- st_read("Data/Strassennetz.shp")
# Inspect the data
print(streets)
#cut the street data extend to the buffer around GPX data
# Create a 1000-meter buffer around the GPX tracks
gpx_buffer <- st_buffer(gpx_all, dist = 1000)
# Find street segments that intersect or touch the GPX buffer
streets_intersecting <- st_intersection(streets, gpx_buffer)
# Plot the results
plot(st_geometry(gpx_buffer), add = TRUE, border = 'blue', lwd = 2)
# Plot the results
plot(st_geometry(gpx_buffer), add = TRUE, border = 'blue', lwd = 2)
# Plot the results
ggplot(st_geometry(gpx_buffer), add = TRUE, border = 'blue', lwd = 2)
ggplot(st_geometry(streets_intersecting), add = TRUE, col = 'red')
# Plot the results
ggplot() +
geom_sf(data = gpx_buffer, fill = NA, color = 'blue', size = 1) +
geom_sf(data = streets_intersecting, color = 'red') +
theme_minimal() +
labs(title = "Streets and GPX Buffer", x = "Longitude", y = "Latitude")
# Function to calculate speeds and summary statistics
calculate_speed_stats <- function(gpx_sf) {
# Ensure the data is sorted by time
gpx_sf <- gpx_sf %>% arrange(time)
# Calculate distances between consecutive points
distances <- st_distance(gpx_sf, gpx_sf, by_element = TRUE)
distances <- as.numeric(distances)
# Calculate time differences between consecutive points
time_diffs <- as.numeric(difftime(gpx_sf$time[-1], gpx_sf$time[-length(gpx_sf$time)], units = "secs"))
# Calculate speeds (m/s)
speeds <- distances / time_diffs
# Compute summary statistics
max_speed <- max(speeds, na.rm = TRUE)
avg_speed <- mean(speeds, na.rm = TRUE)
speed_variance <- var(speeds, na.rm = TRUE)
# Return as a named list
return(list(max_speed = max_speed, avg_speed = avg_speed, speed_variance = speed_variance))
}
# Apply the function to each segment and add the results as new attributes
speed_stats <- calculate_speed_stats(gpx_all)
# Ensure the data is sorted by time
gpx_all <- gpx_all %>% arrange(time)
# Ensure the data is sorted by time
all_gpx_sf <- all_gpx_sf[order(all_gpx_sf$time), ]
# Ensure the data is sorted by time
gpx_all <- gpx_all[order(gpx_all$time), ]
View(gpx_all)
View(gpx_all[[13]][[1]])
# Specify the path to the folder containing GPX files
data_folder <- "Data"
# List all GPX files in the folder
gpx_files <- list.files(data_folder, pattern = "\\.gpx$", full.names = TRUE)
# Initialize an empty list to store the GPX data
gpx_list <- list()
# Function to read a GPX file and extract coordinates and time
read_gpx <- function(file) {
gpx <- read_xml(file)
trkpts <- xml_find_all(gpx, ".//trkpt")
coords <- st_as_sf(data.frame(
lon = as.numeric(xml_attr(trkpts, "lon")),
lat = as.numeric(xml_attr(trkpts, "lat")),
time = as.POSIXct(xml_text(xml_find_all(trkpts, "time")), format = "%Y-%m-%dT%H:%M:%OSZ", tz = "UTC")
), coords = c("lon", "lat"), crs = 4326)
# Transform the coordinate system to LV95 (EPSG:2056)
coords <- st_transform(coords, crs = 2056)
return(coords)
}
# Loop through each GPX file, read the data, and append to the list
for (file in gpx_files) {
gpx_sf <- read_gpx(file)
gpx_list <- append(gpx_list, list(gpx_sf))
}
gpx_all[[13]][[1]][[1]]
install.packages("xml2")
check_pkg <- function(x) {
#' Checks whether a package is installed and installs or loads the package
if (!require(x, character.only = TRUE, quietly = TRUE))
{
install.packages(x, dep = TRUE)
if (!require(x, character.only = TRUE, quietly = TRUE))
stop("Package not found")
}
}
check_pkg("readr")
check_pkg("dplyr")
check_pkg("sf")
check_pkg("sp")
check_pkg("ggplot2")
check_pkg("lubridate")
check_pkg("SimilarityMeasures")
check_pkg("plotly")
check_pkg("geosphere")
check_pkg("leaflet")
check_pkg("xml2")
Data <- here::here()   # Data folder
# Specify the path to the folder containing GPX files
data_folder <- "Data"
# List all GPX files in the folder
gpx_files <- list.files(data_folder, pattern = "\\.gpx$", full.names = TRUE)
# Initialize an empty list to store the GPX data
gpx_list <- list()
# Function to read a GPX file and extract coordinates and time
read_gpx <- function(file) {
gpx <- read_xml(file)
trkpts <- xml_find_all(gpx, ".//trkpt")
coords <- st_as_sf(data.frame(
lon = as.numeric(xml_attr(trkpts, "lon")),
lat = as.numeric(xml_attr(trkpts, "lat")),
time = as.POSIXct(xml_text(xml_find_all(trkpts, "time")), format = "%Y-%m-%dT%H:%M:%OSZ", tz = "UTC")
), coords = c("lon", "lat"), crs = 4326)
# Transform the coordinate system to LV95 (EPSG:2056)
coords <- st_transform(coords, crs = 2056)
return(coords)
}
# Loop through each GPX file, read the data, and append to the list
for (file in gpx_files) {
gpx_sf <- read_gpx(file)
gpx_list <- append(gpx_list, list(gpx_sf))
}
# Combine all the GPX data into a single sf object
all_gpx_sf <- do.call(rbind, gpx_list)# List all GPX files in the folder
gpx_files <- list.files(data_folder, pattern = "\\.gpx$", full.names = TRUE)
# Initialize an empty list to store the GPX data
gpx_list <- list()
# Function to read a GPX file and extract coordinates and time
read_gpx <- function(file) {
gpx <- read_xml(file)
trkpts <- xml_find_all(gpx, ".//trkpt")
coords <- st_as_sf(data.frame(
lon = as.numeric(xml_attr(trkpts, "lon")),
lat = as.numeric(xml_attr(trkpts, "lat")),
time = as.POSIXct(xml_text(xml_find_all(trkpts, "time")), format = "%Y-%m-%dT%H:%M:%OSZ", tz = "UTC")
), coords = c("lon", "lat"), crs = 4326)
# Transform the coordinate system to LV95 (EPSG:2056)
coords <- st_transform(coords, crs = 2056)
return(coords)
}
# Loop through each GPX file, read the data, and append to the list
for (file in gpx_files) {
gpx_sf <- read_gpx(file)
gpx_list <- append(gpx_list, list(gpx_sf))
}
# Combine all the GPX data into a single sf object
all_gpx_sf <- do.call(rbind, gpx_list)
View(all_gpx_sf)
check_pkg <- function(x) {
#' Checks whether a package is installed and installs or loads the package
if (!require(x, character.only = TRUE, quietly = TRUE))
{
install.packages(x, dep = TRUE)
if (!require(x, character.only = TRUE, quietly = TRUE))
stop("Package not found")
}
}
check_pkg("readr")
check_pkg("dplyr")
check_pkg("sf")
check_pkg("sp")
check_pkg("ggplot2")
check_pkg("lubridate")
check_pkg("SimilarityMeasures")
check_pkg("plotly")
check_pkg("geosphere")
check_pkg("leaflet")
Data <- here::here()   # Data folder
# Specify the path to the folder containing GPX files
data_folder <- "Data"
# List all GPX files in the folder
gpx_files <- list.files(data_folder, pattern = "\\.gpx$", full.names = TRUE)
# Initialize an empty list to store the GPX data
gpx_list <- list()
# Loop through each GPX file and read the data
for (file in gpx_files) {
# Read the GPX file
gpx_sf <- st_read(file, layer = "tracks", quiet = TRUE)
# Transform the coordinate system to LV95 (EPSG:2056)
gpx_sf_transformed <- st_transform(gpx_sf, crs = 2056)
# Append to the list
gpx_list <- append(gpx_list, list(gpx_sf_transformed))
}
# Combine all the GPX data into a single sf object
gpx_all <- do.call(rbind, gpx_list)
# Modify the "type" attribute from "night hike" to "skitour"
gpx_all$type[10] <- "skitour"
# Inspect the combined data
print(gpx_all)
#import of the road network data
# Read the shapefile
streets <- st_read("Data/Strassennetz.shp")
# Inspect the data
print(streets)
#cut the street data extend to the buffer around GPX data
# Create a 1000-meter buffer around the GPX tracks
gpx_buffer <- st_buffer(gpx_all, dist = 1000)
# Find street segments that intersect or touch the GPX buffer
streets_intersecting <- st_intersection(streets, gpx_buffer)
#Visualize and understand the GPX and road network data
# Plot the results
ggplot() +
geom_sf(data = gpx_buffer, fill = NA, color = 'blue', size = 1) +
geom_sf(data = streets_intersecting, color = 'red') +
theme_minimal() +
labs(title = "Streets and GPX Buffer", x = "Longitude", y = "Latitude")
#histograms, box plots, and scatter plots -> similarities between transportation modes
#Visualize and understand the GPX and road network data
# Plot the results
ggplot() +
geom_sf(data = gpx_buffer, fill = NA, color = 'red', size = 1) +
geom_sf(data = streets_intersecting, color = 'grey') +
theme_minimal() +
labs(title = "Streets and GPX Buffer", x = "Longitude", y = "Latitude")
#histograms, box plots, and scatter plots -> similarities between transportation modes
#Visualize and understand the GPX and road network data
# Plot the results
ggplot() +
geom_sf(data = streets_intersecting, color = 'grey') +
geom_sf(data = gpx_buffer, fill = NA, color = 'red', size = 1) +
theme_minimal() +
labs(title = "Streets and GPX Buffer", x = "Longitude", y = "Latitude")
#histograms, box plots, and scatter plots -> similarities between transportation modes
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
install.packages("ggspatial")
check_pkg <- function(x) {
#' Checks whether a package is installed and installs or loads the package
if (!require(x, character.only = TRUE, quietly = TRUE))
{
install.packages(x, dep = TRUE)
if (!require(x, character.only = TRUE, quietly = TRUE))
stop("Package not found")
}
}
check_pkg("readr")
check_pkg("dplyr")
check_pkg("sf")
check_pkg("sp")
check_pkg("ggplot2")
check_pkg("lubridate")
check_pkg("SimilarityMeasures")
check_pkg("plotly")
check_pkg("geosphere")
check_pkg("leaflet")
check_pkg("ggspatial")
check_pkg("rnaturalearth")
check_pkg("rnaturalearthdata")
Data <- here::here()   # Data folder
#Visualize and understand the GPX and road network data
# Plot the results
ggplot() +
geom_sf(data = streets_intersecting, color = 'grey') +
geom_sf(data = gpx_buffer, fill = NA, color = 'red', size = 1) +
theme_minimal() +
labs(title = "Streets and GPX Buffer", x = "Longitude", y = "Latitude")
# Plot the results in a Swiss Map
# Get Switzerland basemap
switzerland <- ne_countries(country = "Switzerland", returnclass = "sf")
# Transform basemap to LV95
switzerland <- st_transform(switzerland, 2056)
ggplot() +
geom_sf(data = switzerland, fill = "white", color = "black") +
geom_sf(data = streets_intersecting, color = 'grey') +
geom_sf(data = gpx_buffer, fill = NA, color = 'red', size = 1) +
coord_sf(crs = st_crs(2056)) +
theme_minimal() +
labs(title = "Streets and GPX Buffer", x = "Longitude", y = "Latitude") +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.75, "in"),
style = north_arrow_fancy_orienteering)
#histograms, box plots, and scatter plots -> similarities between transportation modes
#Visualize and understand the GPX and road network data
# Plot the results
ggplot() +
geom_sf(data = streets_intersecting, color = 'grey') +
geom_sf(data = gpx_buffer, fill = NA, color = 'red', size = 1) +
theme_minimal() +
labs(title = "Streets and GPX Buffer", x = "Longitude", y = "Latitude")
# Plot the results in a Swiss Map
# Get Switzerland basemap
switzerland <- ne_countries(country = "Switzerland", returnclass = "sf")
# Transform basemap to LV95
switzerland <- st_transform(switzerland, 2056)
ggplot() +
geom_sf(data = switzerland, fill = "white", color = "black") +
geom_sf(data = streets_intersecting, color = 'grey') +
geom_sf(data = gpx_buffer, fill = NA, color = 'red', size = 1) +
coord_sf(crs = st_crs(2056)) +
theme_minimal() +
labs(title = "Streets and GPX Buffer", x = "Longitude", y = "Latitude") +
annotation_scale(location = "bl", width_hint = 0.5) +
scale_color_manual(values = c("GPX Buffered" = "red", "Intersecting Streets" = "grey"),
name = "Features") +
theme(legend.position = "right") +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.75, "in"),
style = north_arrow_fancy_orienteering)
#histograms, box plots, and scatter plots -> similarities between transportation modes
#Visualize and understand the GPX and road network data
# Plot the results
ggplot() +
geom_sf(data = streets_intersecting, color = 'grey') +
geom_sf(data = gpx_buffer, fill = NA, color = 'red', size = 1) +
theme_minimal() +
labs(title = "Streets and GPX Buffer", x = "Longitude", y = "Latitude")
# Plot the results in a Swiss Map
# Get Switzerland basemap
switzerland <- ne_countries(country = "Switzerland", returnclass = "sf")
# Transform basemap to LV95
switzerland <- st_transform(switzerland, 2056)
features <- st_sf(
name = c("GPX Buffered", "Intersecting Streets"),
geometry = st_sfc(gpx_buffer, streets_intersecting)
)
#Visualize and understand the GPX and road network data
# Plot the results
ggplot() +
geom_sf(data = streets_intersecting, color = 'grey') +
geom_sf(data = gpx_buffer, fill = NA, color = 'red', size = 1) +
theme_minimal() +
labs(title = "Streets and GPX Buffer", x = "Longitude", y = "Latitude")
# Plot the results in a Swiss Map
# Get Switzerland basemap
switzerland <- ne_countries(country = "Switzerland", returnclass = "sf")
# Transform basemap to LV95
switzerland <- st_transform(switzerland, 2056)
ggplot() +
geom_sf(data = switzerland, fill = "white", color = "black") +
geom_sf(data = streets_intersecting, color = 'grey') +
geom_sf(data = gpx_buffer, fill = NA, color = 'red', size = 1) +
coord_sf(crs = st_crs(2056)) +
theme_minimal() +
labs(title = "Streets and GPX Buffer", x = "Longitude", y = "Latitude") +
annotation_scale(location = "bl", width_hint = 0.5) +
theme(legend.position = "right") +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.75, "in"),
style = north_arrow_fancy_orienteering)
#histograms, box plots, and scatter plots -> similarities between transportation modes
install.packages("wordcountadding")
install.packages(wordcountadding)
install.packages("wordcountadding")
import("wordcountadding")
include("wordcountadding")
library("wordcountadding")
check_pkg <- function(x) {
#' Checks whether a package is installed and installs or loads the package
if (!require(x, character.only = TRUE, quietly = TRUE))
{
install.packages(x, dep = TRUE)
if (!require(x, character.only = TRUE, quietly = TRUE))
stop("Package not found")
}
}
check_pkg("readr")
check_pkg("dplyr")
check_pkg("sf")
check_pkg("sp")
check_pkg("ggplot2")
check_pkg("lubridate")
check_pkg("SimilarityMeasures")
check_pkg("plotly")
check_pkg("geosphere")
check_pkg("leaflet")
check_pkg("ggspatial")
check_pkg("rnaturalearth")
check_pkg("rnaturalearthdata")
Data <- here::here()   # Data folder
# Specify the path to the folder containing GPX files
data_folder <- "Data"
# List all GPX files in the folder
gpx_files <- list.files(data_folder, pattern = "\\.gpx$", full.names = TRUE)
# Initialize an empty list to store the GPX data
gpx_list <- list()
# Loop through each GPX file and read the data
for (file in gpx_files) {
# Read the GPX file
gpx_sf <- st_read(file, layer = "tracks", quiet = TRUE)
# Transform the coordinate system to LV95 (EPSG:2056)
gpx_sf_transformed <- st_transform(gpx_sf, crs = 2056)
# Append to the list
gpx_list <- append(gpx_list, list(gpx_sf_transformed))
}
# Combine all the GPX data into a single sf object
gpx_all <- do.call(rbind, gpx_list)
# Modify the "type" attribute from "night hike" to "skitour"
gpx_all$type[10] <- "skitour"
# Inspect the combined data
print(gpx_all)
View(gpx_all)
View(gpx_all[[13]][[1]])
View(gpx_sf)
View(gpx_list)
check_pkg <- function(x) {
#' Checks whether a package is installed and installs or loads the package
if (!require(x, character.only = TRUE, quietly = TRUE))
{
install.packages(x, dep = TRUE)
if (!require(x, character.only = TRUE, quietly = TRUE))
stop("Package not found")
}
}
check_pkg("readr")
check_pkg("dplyr")
check_pkg("sf")
check_pkg("sp")
check_pkg("ggplot2")
check_pkg("lubridate")
check_pkg("SimilarityMeasures")
check_pkg("plotly")
check_pkg("geosphere")
check_pkg("leaflet")
check_pkg("ggspatial")
check_pkg("rnaturalearth")
check_pkg("rnaturalearthdata")
check_pkg("tidyverse")
Data <- here::here()   # Data folder
install.packages("tidyverse")
install.packages("tidyverse")
